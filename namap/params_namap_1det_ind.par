#NAMAP parameters 

#--- Data Paths Parameters --
hdf5_file = 'fits_and_hdf5/TOD_pySIDES_from_uchuu_tile_0_1.414deg_x_1.414deg_fir_lines_res20arcsec_dnu4.0GHz_full_de_Looze_smoothed_MJy_sr.hdf5' #Path for TOD data

#Table with name of detectors, response, white noise level and offsets. 
detector_table = 'config/TIM_kid_table.tsv' 

#--- Choose detectors to analyse ---
kid_num = ('A_432',) #ID of the detector(s) to be analyzed.
#Can be a single detector, e.g., ('A_603',),  a list of detector, e.g, ('A_432', 'A_549', 'A_603') or the entire array 'all' 
#Need to add an option to get all detectors of a feedline or of a frequency. 

#--- Chose the data in the time dimension ---
num_frames=3500 #integration time in seconds to be loaded. 
first_frame=0 #Starting time in second to loaded

#--- Coadd the detectors --#
#if True, the data of detectors are coadded. Else, Namap produces a map for each detector. 
coadd = False

#--- Plot, power, I or Q maps ---
Power_only = True #To plot power amplitude map. So far the only option, but we can add I and Q maps options

#--- Include noise ---
#if True, will compute the TOD dispersion and plot the inverse variance weighted map. Yet to be implemented
noise_det = False


#--- Correct for the poiting offset ---
#There is no pointing offset from simulated TOD so far. 
correction = False
#if correction is True, will load the pointing offset from this table
pointing_table = None #Path for the star camera offset table
time_offset = 0 #Time offset between detector data and coordinates

#--- Astrometry Parameter ---
telemetry = False #Specify if the data are coming from telemetry, so mole, or if they are coming from hard drives
telescope_coordinate = False #Use of telescope coordinates to draw a map
xystage = False

#--- choice of coordinate system to draw a map ---
ctype = 'RA and DEC' #['RA and DEC', 'AZ and EL', CROSS-EL and EL,'XY Stage'], 
lat=False
lst=False

crpix = np.asarray([0, 0])
cdelt = np.asarray([0.0055555555555556, 0.0055555555555556]) #Pixel resolution along the two axis in degree. 
crval =  np.asarray([-0.7027777777777834 ,-28.51666333333334 ]) #Value of the reference pixel in degree and its associated pixel number. Default value is np.asarray([230.  , -55.79])
pixnum = np.asarray([100., 100.]) #Number of pixels along the two axis. The input needs to be written as XX YY. Not implement so far. 

#--- convolution by the beam ---
gaussian_convolution = False #
std = 0 #STD of the gaussian used for the convolution. The value is in arcsec
 

#--- Preprocessing data analysis parameters ---
#Do not work on simulated timestreams so far, as there is no strong baseline, noise nor peaks. 
highpassfreq = 0 #Cutoff frequency for high-pass filter detector data. Default value is 0.1
polynomialorder = 0 #Polynomial order used to fit the TOD to detrend data. Default value is 5
despike = False #Despike flag. If called, two possible parameters can be explicited. 
sigma=5        #The first is the height in sigma unit for the peak, 
prominence=5   #and the second is the prominence in sigma unit for the peak
